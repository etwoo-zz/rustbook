cargo check

    like compiling but does not produce executable

type declaration for array

    let a: [i32; 5] = [1, 2, 3, 4, 5];
                 ^ number of elements
            ^^^
            type of each element

statements (do not return value) vs expressions (evaluate to resulting value)

	fn main() {
		let x = 5;

		let y = {
			let x = 3;
			x + 1
		};

		println!("The value of y is: {}", y);
	}

	This expression:

	{
		let x = 3;
		x + 1
	}

    is a block that, in this case, evaluates to 4. That value gets bound
    to y as part of the let statement. Note the x + 1 line without a
    semicolon at the end, which is unlike most of the lines youâ€™ve seen
    so far. Expressions do not include ending semicolons. If you add a
    semicolon to the end of an expression, you turn it into a statement,
    which will then not return a value.
